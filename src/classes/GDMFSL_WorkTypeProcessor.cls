/*******************************************************************************************
Name       :    GDMFSL_WorkTypeProcessor
Purpose    :    Processor Logic for WorkType object . See method descriptions for proper context for calling each method
--------------------------------------------------------------------------
Developer               Date          Description
--------------------------------------------------------------------------
Udbhav                  2020-Sep-07    Created
**********************************************************************************************/

public without sharing class GDMFSL_WorkTypeProcessor {

    public static final String WORKTYPECATEGORY_PM = 'PM';
    public static final String WORKTYPECATEGORY_BF = 'BF';

    private static Map<Id, WorkType> retVals = new Map<Id, WorkType>();

    @TestVisible
    private static WorkType woAutoGenWorkType;
    @TestVisible
    private static WorkType woAssistanceWorkType;

    @TestVisible
    private static final String AUTOGENWORKORDERUSAGEVALUE = 'Auto-generated PM';
    @TestVisible
    private static final String ASSISTPMNWORKORDERUSAGEVALUE = 'Assistance PM';

    public static Map<Id, WorkType> getRecords(Set<Id> recIds) {

        System.debug('GDMFSL_WorkTypeProcessor.getRecords()');

        Set<Id> newRecIds = new Set<Id>();

        if (recIds != null && !recIds.isEmpty()) {

            System.debug('Adding in specified recordIDs');

            if (retVals.isEmpty()) {
                newRecIds.addAll(recIds);
            } else {
                for (Id thisRecId : recIds) {
                    if (!retVals.containsKey(thisRecId)) {
                        newRecIds.add(thisRecId);
                    }
                }
            }
        }

        if (!newRecIds.isEmpty()
                || woAutoGenWorkType == null
                || woAssistanceWorkType == null) {

            for (WorkType theRec : [
                    SELECT Id,
                            Name,
                            GDMFSL_WorkType_Category__c,
                            GDMFSL_Priority__c,
                            DurationInMinutes,
                            FSL__Due_Date_Offset__c,
                            GDMFSL_Arrival_Time_Offset__c,
                            GDMFSL_Response_Time_Offset__c,
                            GDMFSL_Discipline__c,
                            ServiceReportTemplateId,
                            GDMFSL_Work_Order_Usage__c,
                            GDMFSL_Asset_Certification__c
                    FROM WorkType
                    WHERE Id IN :newRecIds
                    OR GDMFSL_Work_Order_Usage__c = :AUTOGENWORKORDERUSAGEVALUE
                    OR GDMFSL_Work_Order_Usage__c = :ASSISTPMNWORKORDERUSAGEVALUE
            ]) {

                if (newRecIds.contains(theRec.Id)) {
                    retVals.put(theRec.Id, theRec);
                }

                if (woAutoGenWorkType == null
                        && theRec.GDMFSL_Work_Order_Usage__c == AUTOGENWORKORDERUSAGEVALUE) {
                    woAutoGenWorkType = theRec;
                }

                if (woAssistanceWorkType == null
                        && theRec.GDMFSL_Work_Order_Usage__c == ASSISTPMNWORKORDERUSAGEVALUE) {
                    woAssistanceWorkType = theRec;
                }
            }

            System.debug('Retrieved WorkTypes: ' + retVals);
        }

        return retVals;
    }

    public static WorkType getWorkTypeForAutoGeneratedWOs() {

        if (woAutoGenWorkType == null) {
            getRecords(null);
        }
        return woAutoGenWorkType;
    }

    public static WorkType getWorkTypeForAssistanceWOs() {

        if (woAssistanceWorkType == null) {
            getRecords(null);
        }

        return woAssistanceWorkType;
    }


}