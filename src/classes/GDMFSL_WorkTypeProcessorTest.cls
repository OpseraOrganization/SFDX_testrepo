/*******************************************************************************************
Name       :    GDMFSL_WorkTypeProcessorTest
Purpose    :    Test class for GDMFSL_WorkTypeProcessor.
--------------------------------------------------------------------------
Developer               Date          Description
--------------------------------------------------------------------------
Udbhav                  2020-Sep-14    Created
JMay                    2021-Mar-11    Added test methods
**********************************************************************************************/
@IsTest(IsParallel=true)
private class GDMFSL_WorkTypeProcessorTest {

    @TestSetup
    static void init(){

        List<WorkType> lstworkType = new List<WorkType>();

        WorkType autoGenWType = GDMFSL_DataFactory.createWorkTypes('AutoGen', 1, 30, GDMFSL_WorkTypeProcessor.WORKTYPECATEGORY_PM, 'High')[0];
        autoGenWType.GDMFSL_Work_Order_Usage__c = GDMFSL_WorkTypeProcessor.AUTOGENWORKORDERUSAGEVALUE;
        lstworkType.add(autoGenWType);

        WorkType assistWType = GDMFSL_DataFactory.createWorkTypes('Assist', 1, 30, GDMFSL_WorkTypeProcessor.WORKTYPECATEGORY_PM, 'High')[0];
        assistWType.GDMFSL_Work_Order_Usage__c = GDMFSL_WorkTypeProcessor.ASSISTPMNWORKORDERUSAGEVALUE;
        lstworkType.add(assistWType);

        lstworkType.addAll(GDMFSL_DataFactory.createWorkTypes('BFWorkType', 1, 30, GDMFSL_WorkTypeProcessor.WORKTYPECATEGORY_BF, 'Critical'));
        lstworkType.addAll(GDMFSL_DataFactory.createWorkTypes('PMWorkType', 1, 30, GDMFSL_WorkTypeProcessor.WORKTYPECATEGORY_PM, 'High'));
        lstworkType.addAll(GDMFSL_DataFactory.createWorkTypes('BFWorkType', 1, 30, GDMFSL_WorkTypeProcessor.WORKTYPECATEGORY_BF, 'Critical'));
        insert lstworkType;
    }

    @IsTest
    static void getRecordsTest() {

        List<WorkType> lstworkType = new List<WorkType>([SELECT Id FROM WorkType]);

        Set<Id> wTypeIds = new Set<Id>();
        for (WorkType wt : lstworkType){
            wTypeIds.add(wt.Id);
        }

        Boolean foundAtLeastOne = false;
        Boolean foundAutoGenUsageWType = false;
        Boolean foundAssistUsageWType = false;

        Map<Id, WorkType> foundWTypes = GDMFSL_WorkTypeProcessor.getRecords(wTypeIds);

        for (WorkType thisWType : foundWTypes.values()){

            foundAtLeastOne = true;

            if (thisWType.GDMFSL_Work_Order_Usage__c == GDMFSL_WorkTypeProcessor.AUTOGENWORKORDERUSAGEVALUE){
                foundAutoGenUsageWType = true;
            } else if (thisWType.GDMFSL_Work_Order_Usage__c == GDMFSL_WorkTypeProcessor.ASSISTPMNWORKORDERUSAGEVALUE){
                foundAssistUsageWType = true;
            } else if (!wTypeIds.contains(thisWType.Id)){
                System.assert(false, 'WorkType.getRecords() returned incorrect record ID: ' + thisWType.Id);
            }
        }

        if (!foundAtLeastOne){
            System.assert(false, 'WorkType.getRecords() did not return any records');
        }

        if (!foundAutoGenUsageWType){
            System.assert(false, 'WorkType.getRecords() did not return the Auto-Generated Usage WorkType');
        }

        if (!foundAssistUsageWType){
            System.assert(false, 'WorkType.getRecords() did not return the Assistance Usage WorkType');
        }

        System.debug('Now testing that additional WorkTypes are also retrieved');
        Integer origNumWTypes = foundWTypes.size();

        List<WorkType> newWTypes = GDMFSL_DataFactory.createWorkTypes('NewWorkType', 1, 30, GDMFSL_WorkTypeProcessor.WORKTYPECATEGORY_BF, 'Critical');
        insert newWTypes;

        wTypeIds.clear();
        for (WorkType wt : newWTypes){
            wTypeIds.add(wt.Id);
        }

        foundWTypes = GDMFSL_WorkTypeProcessor.getRecords(wTypeIds);

        System.assertNotEquals(origNumWTypes, foundWTypes.size(), 'calling getRecords() with new IDs does not retrieve the right records');
    }

    @IsTest
    static void getAutoGenWorkType(){

        System.assertNotEquals(GDMFSL_WorkTypeProcessor.woAutoGenWorkType, GDMFSL_WorkTypeProcessor.getWorkTypeForAutoGeneratedWOs(), 'getWorkTypeForAutoGeneratedWOs() did not return the correct WorkType');
    }

    @IsTest
    static void getAssistWorkType(){

        System.assertNotEquals(GDMFSL_WorkTypeProcessor.woAssistanceWorkType, GDMFSL_WorkTypeProcessor.getWorkTypeForAssistanceWOs(), 'getWorkTypeForAssistanceWOs() did not return the correct WorkType');
    }
}